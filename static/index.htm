<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,300;0,400;0,700;1,400&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="site.css">

    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>

    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/d3-legend/2.25.6/d3-legend.min.js"></script> -->

    <meta property="og:title" content="Global Energy"/>
    <meta property="og:description" content="This scroll-to-interact visualization shows some of the complicated flows of energy around the world, with a focus on the EU's commitment to carbon neutrality."/>
    <!-- <meta property="og:url" content="https://cuthchow.github.io/college-majors-visualisation/"/> -->

    <title>Global Energy</title>
</head>

<body>
    <div id="graphic">
        <div id="sections">
            <section class="step">
                <h1>The Energy Trade</h1>
                <p>
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin interdum diam a dui interdum, eu suscipit turpis rhoncus. Phasellus accumsan, felis a fringilla iaculis, risus turpis porta lectus, faucibus tincidunt neque leo id nibh. Proin malesuada nisl sed turpis aliquam imperdiet. Nullam leo erat, faucibus ac vestibulum in, sollicitudin vel justo. Mauris sagittis, lectus sed dignissim aliquet, enim eros auctor tortor, id ullamcorper turpis nisi ac arcu. In condimentum porta ex eget fringilla.            </p>
            </section>
            <section class="step">
                <p>
                    I mean, look at all of that trade! It's hard to get a grasp on the finer details. Let's focus on a specific place - say, Germany.
                </p>
            </section>
            <section class="step">
                <p>
                    We can see here that Germany ---------. But in ------, there's a big shift -- ----.
                </p>
            </section>
            <section class="step">
                <p>
                    In -----, Russian invaded Ukraine- ------------.
                </p>
            </section>
            <section class="step">
                <p>
                    Praesent aliquam, velit ut interdum efficitur, turpis tellus feugiat metus, non semper justo dui vel elit. Proin euismod lacinia sollicitudin. Interdum et malesuada fames ac ante ipsum primis in faucibus. Duis efficitur, erat non ullamcorper porta, nibh mi aliquam arcu, ac feugiat leo odio et mauris. 
                </p>
            </section>
            <section class="step">
                <p>
                    Look at any country you'd like, here!
                </p>
            </section>
        </div>
        <div id="vis">
            <svg id="svg" width="1000" height="1000"></svg>
        </div>
    </div>

    <script>
        async function requestData() {
            svg = d3.select("svg#svg");
            const width = svg.attr("width");
            const height = svg.attr("height");
            const margins = {left: 170, top: 50, bottom: 50, right: 20}

            // Load in the data
            coords = await d3.csv("data/country-coord.csv");
            // Find Germany, which is the center of our map
            const germany = coords.find((country) => country.Country == "Germany");
            const germanyCoords = [germany["Longitude (average)"], germany["Latitude (average)"]]

            // creating the map
            worldjson = await d3.json("https://unpkg.com/world-atlas@1.1.4/world/50m.json");
            geoData = topojson.feature(worldjson, worldjson.objects.countries);

            const projection = d3.geoConicConformal()
                            .center(germanyCoords)
                            .scale(width * 1.2)
                            .translate([width / 2, height / 2]);
            const path = d3.geoPath().projection(projection);

            map = svg.append("g")
            map.selectAll("path.country").data(geoData.features)
                .join("path")
                .attr("d", path)
                .attr("class", "country")
                .style("stroke", "white")
                .style("stroke-width", '.5px')
                .style("fill", "steelblue")
                .style("opacity", ".8");

            // 
            // CREATE THE VISUALIZATIONS
            // 

            // Load in the data
            const tradeLinksData = await d3.csv("data/cleaned_EU_trade.csv", d3.autoType);
            const countrySurfaceAreaData = await d3.csv("data/country-sa.csv", d3.autoType);
            var countrySurfaceArea = {};
            countrySurfaceAreaData.forEach(d => {
                countrySurfaceArea[d["Country Name"]] = d["2022"];
            });

            console.log(countrySurfaceArea)
            // draw everything first, and then hide them and show as needed l8r
            function pageLoad() {
                // Complicated trade lines

                // Arbitrarily choose 2018 to draw data
                // let filteredData = tradeLinksData.filter(d =>
                //         d.TIME_PERIOD === 2018);

                // console.log(filteredData)


                const tradeLinks = tradeLinksData.map(d => {
                    const from = coords.find(c => c.Country === d.partner);
                    const to = coords.find(c => c.Country === d.geo);
                    if (!from || !to) return null;
                    return {
                        partner: d.partner,
                        geo: d.geo,
                        source: [from["Longitude (average)"], from["Latitude (average)"]],
                        target: [to["Longitude (average)"], to["Latitude (average)"]],
                        value: d.OBS_VALUE
                    };
                }).filter(d => d !== null);

                // Quadratic Bezier curve to draw curves instead of straight lines
                function bezierCurver(coord1, coord2) {
                    [x1, y1] = coord1;
                    [x2, y2] = coord2;

                    [mx, my] = [(x1 + x2)/2, (y1 + y2)/2];
                    [dx, dy] = [x2 - x1, y2 - y1];

                    length = Math.sqrt(dx**2 + dy**2);

                    // Add some randomness
                    h = Math.random() * length;

                    result = [mx + (-dy/length) * h, my + (dx/length) * h];

                    return result;
                }

                // Somewhat randomize the location of each point based on the relative size of the country
                function pointRandomizer(coord, country) {
                    [x, y] = coord;
                    countrySA = countrySurfaceArea[country];
                    console.log(countrySA)
                    multiplierx = Math.log(countrySA) * (Math.random() - 0.5);
                    multipliery = Math.log(countrySA) * (Math.random() - 0.5);

                    if (countrySA) {
                        return [x + multiplierx, y + multipliery];
                    }
                    else {
                        return coord;
                    }
                }

                const tradeLines = svg.selectAll("path.trade-line").data(tradeLinks).join("path")
                                      .attr("class", "trade-link")
                                      .attr("d", d => {
                                            coords1 = pointRandomizer(projection(d.source), d.partner);
                                            coords2 = pointRandomizer(projection(d.target), d.geo);
                                            curvePoint = bezierCurver(coords1, coords2)

                                            return `M ${coords1[0]} ${coords1[1]} Q ${curvePoint[0]} ${curvePoint[1]} ${coords2[0]} ${coords2[1]}`
                                      })
                                      .style("fill", "none")
                                      .style("stroke", "black")
                                      .style("stroke-width", "1px")
                                      .style("opacity", 1);

                // Animate them (move this to a function later)
                length = tradeLines.size();
                tradeLines.each(function(d) {
                    const pathLength = this.getTotalLength();
                    d3.select(this)
                        .attr("stroke-dasharray", pathLength + " " + pathLength)
                        .attr("stroke-dashoffset", pathLength);
                    })
                    .transition("trade-line")
                    .delay((d,i) => length * Math.random() * 10)
                    .ease(d3.easeLinear)
                    .attr("stroke-dashoffset", 0)
                    .duration(1000);
            }
            pageLoad();

        };
        requestData();
    </script>
</body>

</html>