<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <title>EU Energy Trade</title>

    <!-- Leaflet CSS & JS -->
    <link rel="stylesheet" href="site.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <!-- D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>

    <style>
        #map { 
            width: 100vw;
            height: 700px; 
            margin-top: 0px;
            /* position: absolute;  */
            overflow: hidden;   
            z-index: 2;

            /* z-index: 1;  */
        }
        #worldmap {
            width: 100vw; 
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1;
        }
        .bubble { 
            fill: orange; 
            opacity: 0.7; 
        }
        svg {
                display: block;
                background-color: #f0f0f0;
            }
        #space {
            width: 300px;
            height: 1900px; 
            margin-top: 0px;
            position: relative;
            background-color: rgb(124, 133, 133); 
            z-index: 5;
            /* overflow: hidden;    */
        }
        #big-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%); /* centers the element */
            z-index: 3;
            text-align: center;
            font-size: 60px;
            color: white;
            background-color: rgba(124, 133, 133, 0.9); 
            padding: 10px;
        }
        #small-text {
            position: absolute;
            top: 70%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 700px;
            text-align: center;
            font-size: 25px;
            color: white;
            background-color: rgba(124, 133, 133, 0.8); 
            padding: 10px;
            z-index: 3;
        }
        #small-text-2 {
            position: absolute;
            top: 100%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 700px;
            text-align: center;
            font-size: 25px;
            color: white;
            background-color: rgba(124, 133, 133, 0.8); 
            padding: 10px;
            z-index: 3;
        }
        /* .country {
            fill: steelblue;
            stroke: 'transparent';
            stroke-width: 1px;
            cursor: pointer;
            opacity: 0.8;
        } */

    </style>
</head>

<body>
    <svg id="worldmap" width="1560" height="750"></svg>
    <div id='big-text'>Energy is Everywhere</div>
    <div id='small-text'>The goal of our visualization is to explore the international trade of energy,
         electricity, renewables, and the natural gas trade, specifically in Europe. We will create an 
         article where users will be introduced to the topic and interact with through scrolling, hovering, 
         and clicking. Users will go from one section/interactive visualization to the next through scrolling,
          similar to that of the NY Times articles. The main visualizations will be price and energy graphs and
           interactive energy flow maps. "</div>
    <div id='small-text-2'>As the user scrolls more, the map will zoom in on Europe and the EU. Text will pop up 
        and explain how the EU has committed to becoming carbon neutral by 2050 and how this visualization will 
        help users understand how the energy markets can be the key to making it happen. As they scroll, the user 
        will first see arrows between countries popping up, explaining how energy is traded between countries. 
        For example, France, which has a high amount of nuclear energy generation, can sell their excess energy 
        to Germany who doesnâ€™t have as much clean energy generation. Users will be able to click on various 
        countries at this stage and see different arrows pop up as well as a side-box detailing who they are 
        buying/selling energy from and in what form. </div>
    <div id='map'> </div>
    <div id='space'> </div> <!--- big grey box-->

    <script>

        const southWest = L.latLng(40.351254, -79.879532);
        const northEast = L.latLng(40.52998, -80.108871);
        bounds = L.latLngBounds(southWest, northEast);

        const requestData = async function () {

            // // Create Map Var, setting max bounds of the map
            // var map = L.map('map').setView([36.031332, -19.698584], 3);

            // // NORMAL 
            // // var tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            // //     maxZoom: 19,
            // //     attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            // // }).addTo(map);
            
            // //    ELECTRICITY AT NIGHT - WORKS - start with this and then move to diff
            // var tiles = L.tileLayer('https://map1.vis.earthdata.nasa.gov/wmts-webmerc/VIIRS_CityLights_2012/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}', {
            //     attribution: 'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System (<a href="https://earthdata.nasa.gov">ESDIS</a>) with funding provided by NASA/HQ.',
            //     bounds: [[-85.0511287776, -179.999999975], [85.0511287776, 179.999999975]],
            //     minZoom: 1,
            //     maxZoom: 8,
            //     format: 'jpg',
            //     time: '',
            //     tilematrixset: 'GoogleMapsCompatible_Level'
            // }).addTo(map);

            // // DARK - WORKS - hard to read
            // var tilesBlack = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            //     attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            //     subdomains: 'abcd',
            //     maxZoom: 20
            // });

            // var popup = L.popup();
            //     function onMapClick(e) {
            //         popup
            //             .setLatLng(e.latlng)
            //             .setContent(e.latlng.toString())
            //             .openOn(map);
            //     }
            //     map.on('click', onMapClick);

            /// ------------------------------------------------------------------------ 

            let svg = d3.select("#worldmap")

            // const width = svg.attr("width");
            // const height = svg.attr("height");
            const width = window.innerWidth;
            const height = window.innerHeight;

            svg.attr("width", width).attr("height", height);

            const projection = d3.geoMercator()
                    .scale(170)
                    .translate([width / 2, height / 2]);

            const path = d3.geoPath().projection(projection);

            let mouseOver = function(d) {
                d3.selectAll(".country")
                .transition()
                .duration(200)
                .style("opacity", '.5')
                d3.select(this)
                .transition()
                .duration(200)
                .style("opacity", "1")
                .style("stroke", "black")
            }

            let mouseLeave = function(d) {
                d3.selectAll(".country")
                .transition()
                .duration(200)
                .style("opacity", '.8')
                .style("stroke", "white")
                d3.select(this)
                .transition()
                .duration(200)
                .style("stroke", "white")
            }

            d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson").then(function(data) {
                svg.append("g")
                    .selectAll("path")
                    .data(data.features)
                    .enter()
                    .append("path")
                    .attr("d", path)
                    .attr("class", "country")
                    .style("stroke", "white")
                    .style("stroke-width", '.5px')
                    .style("fill", "steelblue")
                    .style("opacity", ".8")
                    .on("mouseover", mouseOver )
                    .on("mouseleave", mouseLeave )
                    .on("click", function(event, d) {
                        alert("Country: " + d.properties.name);
                    });
            });



            


            let zoom = d3.zoom().on("zoom", (event) => {
                svg.select("g").attr("transform", event.transform);
            });

            // svg.call(zoom);

            let hasZoomed = false;
            window.addEventListener('scroll', () => {
                const triggerY = window.innerHeight * 0.5;

                if (!hasZoomed && window.scrollY > triggerY) {
                    hasZoomed = true;
                    scrollZoomToCountry("Germany"); // center of Europe
                } else if (hasZoomed && scrollY < triggerY - 50) {
                        zoomOutToWorld();
                        hasZoomed = false;
                    }
                });

            function scrollZoomToCountry(countryName) {
                d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson").then(function(data) {
                    const country = data.features.find(f => f.properties.name === countryName);
                    if (!country) return;

                    const [[x0, y0], [x1, y1]] = path.bounds(country);
                    svg.transition().duration(1000).call(
                        zoom.transform,
                        d3.zoomIdentity
                            .translate(width / 2, height / 2)
                            .scale(Math.min(6, 0.9 / Math.max((x1 - x0) / width, (y1 - y0) / height)))
                            .translate(-(x0 + x1) / 2, -(y0 + y1) / 2)
                    );
                });
            }

            function zoomOutToWorld() {
                svg.transition().duration(1000).call(
                    zoom.transform,
                    d3.zoomIdentity // original zoom
                );
            }



        }
        requestData();

    </script>

</body>