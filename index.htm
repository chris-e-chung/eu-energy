<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <title>EU Energy Trade</title>

    <!-- Leaflet CSS & JS -->
    <link rel="stylesheet" href="site.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css">
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <!-- D3.js -->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
    <script src="https://d3js.org/d3-geo-projection.v2.min.js"></script>

    <style>
        #map { 
            width: 100vw;
            height: 700px; 
            margin-top: 0px;
            /* position: absolute;  */
            overflow: hidden;   
            z-index: 2;

            /* z-index: 1;  */
        }
        #worldmap {
            width: 100vw; 
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 1;
        }
        .bubble { 
            fill: orange; 
            opacity: 0.7; 
        }
        svg {
                display: block;
                background-color: #f0f0f0;
            }
        #space {
            width: 300px;
            height: 2900px; 
            margin-top: 0px;
            position: relative;
            background-color: rgb(124, 133, 133); 
            opacity: 0;
            z-index: 5;
            /* overflow: hidden;    */
        }
        #big-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%); /* centers the element */
            z-index: 3;
            text-align: center;
            font-size: 60px;
            color: white;
            background-color: rgba(124, 133, 133, 0.9); 
            padding: 10px;
        }
        #small-text {
            position: absolute;
            top: 70%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 700px;
            text-align: center;
            font-size: 25px;
            color: white;
            background-color: rgba(124, 133, 133, 0.8); 
            padding: 10px;
            z-index: 3;
        }
        #small-text-2 {
            position: absolute;
            top: 100%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 700px;
            text-align: center;
            font-size: 25px;
            color: white;
            background-color: rgba(124, 133, 133, 0.8); 
            padding: 10px;
            z-index: 3;
        }
        /* .country {
            fill: steelblue;
            stroke: 'transparent';
            stroke-width: 1px;
            cursor: pointer;
            opacity: 0.8;
        } */

    </style>
</head>

<body>
    <svg id="worldmap" width="1560" height="750"></svg>
    <div id='big-text'>Energy is Everywhere</div>
    <div id='small-text'>The goal of our visualization is to explore the international trade of energy,
         electricity, renewables, and the natural gas trade, specifically in Europe. We will create an 
         article where users will be introduced to the topic and interact with through scrolling, hovering, 
         and clicking. Users will go from one section/interactive visualization to the next through scrolling,
          similar to that of the NY Times articles. The main visualizations will be price and energy graphs and
           interactive energy flow maps. "</div>
    <div id='small-text-2'>As the user scrolls more, the map will zoom in on Europe and the EU. Text will pop up 
        and explain how the EU has committed to becoming carbon neutral by 2050 and how this visualization will 
        help users understand how the energy markets can be the key to making it happen. As they scroll, the user 
        will first see arrows between countries popping up, explaining how energy is traded between countries. 
        For example, France, which has a high amount of nuclear energy generation, can sell their excess energy 
        to Germany who doesnâ€™t have as much clean energy generation. Users will be able to click on various 
        countries at this stage and see different arrows pop up as well as a side-box detailing who they are 
        buying/selling energy from and in what form. </div>
    <div id='map'> </div>
    <div id='space'> </div> <!--- big grey box-->

    <div id="quantityBox" style="position: fixed; top: 10px; right: 10px; background-color: rgba(0, 0, 0, 0.7); color: white; padding: 10px; border-radius: 5px; font-size: 14px; opacity: 0;">
        <strong>Quantity:</strong> <span id="quantityValue">0</span>
    </div>

    <script>

        const southWest = L.latLng(40.351254, -79.879532);
        const northEast = L.latLng(40.52998, -80.108871);
        bounds = L.latLngBounds(southWest, northEast);

        const requestData = async function () {
            var raw_EU_to_world_liquid = await d3.csv("imports_of_gas_liquied_EU.csv", d3.autoType)
            // // Create Map Var, setting max bounds of the map
            // var map = L.map('map').setView([36.031332, -19.698584], 3);

            // // NORMAL 
            // // var tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            // //     maxZoom: 19,
            // //     attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
            // // }).addTo(map);
            
            // //    ELECTRICITY AT NIGHT - WORKS - start with this and then move to diff
            // var tiles = L.tileLayer('https://map1.vis.earthdata.nasa.gov/wmts-webmerc/VIIRS_CityLights_2012/default/{time}/{tilematrixset}{maxZoom}/{z}/{y}/{x}.{format}', {
            //     attribution: 'Imagery provided by services from the Global Imagery Browse Services (GIBS), operated by the NASA/GSFC/Earth Science Data and Information System (<a href="https://earthdata.nasa.gov">ESDIS</a>) with funding provided by NASA/HQ.',
            //     bounds: [[-85.0511287776, -179.999999975], [85.0511287776, 179.999999975]],
            //     minZoom: 1,
            //     maxZoom: 8,
            //     format: 'jpg',
            //     time: '',
            //     tilematrixset: 'GoogleMapsCompatible_Level'
            // }).addTo(map);

            // // DARK - WORKS - hard to read
            // var tilesBlack = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            //     attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            //     subdomains: 'abcd',
            //     maxZoom: 20
            // });

            // var popup = L.popup();
            //     function onMapClick(e) {
            //         popup
            //             .setLatLng(e.latlng)
            //             .setContent(e.latlng.toString())
            //             .openOn(map);
            //     }
            //     map.on('click', onMapClick);

            /// ------------------------------------------------------------------------ 

            let svg = d3.select("#worldmap")

            // const width = svg.attr("width");
            // const height = svg.attr("height");
            const width = window.innerWidth;
            const height = window.innerHeight;

            svg.attr("width", width).attr("height", height);

            const projection = d3.geoMercator()
                            .scale((width / 2 / Math.PI))  // sensible global scale
                            .translate([width / 2, height / 2]);

            const path = d3.geoPath().projection(projection);

            // let mouseOver = function(d) {
            //     d3.selectAll(".country")
            //     .transition()
            //     .duration(200)
            //     .style("opacity", '.5')
            //     d3.select(this)
            //     .transition()
            //     .duration(200)
            //     .style("opacity", "1")
            //     .style("stroke", "black")
            // }

            // let mouseLeave = function(d) {
            //     d3.selectAll(".country")
            //     .transition()
            //     .duration(200)
            //     .style("opacity", '.8')
            //     .style("stroke", "white")
            //     d3.select(this)
            //     .transition()
            //     .duration(200)
            //     .style("stroke", "white")
            // }


            d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson").then(function(data) {
                svg.append("g")
                    .selectAll("path")
                    .data(data.features)
                    .enter()
                    .append("path")
                    .attr("d", path)
                    .attr("class", "country")
                    .style("stroke", "white")
                    .style("stroke-width", '.5px')
                    .style("fill", "steelblue")
                    .style("opacity", ".8")
                    // .on("mouseover", mouseOver )
                    // .on("mouseleave", mouseLeave )
                    .on("click", function(event, d) {
                        alert("Country: " + d.properties.name);
                    });
            });
            

            const zoom = d3.zoom().scaleExtent([1, 8]).on("zoom", zoomed);

            // svg.call(zoom);
            
            function zoomed(event) {
                svg.attr("transform", event.transform);
            }



            // scroll even listener
            let hasZoomed = false;
            let zoomLevel = 0;  // 0 = world, 1 = moderate zoom, 2 = full zoom
            window.addEventListener('scroll', () => {
                const trigger1 = window.innerHeight * 0.5;
                const trigger2 = window.innerHeight * 1.4;

                if (window.scrollY > trigger2 && zoomLevel < 2) {
                    // Scroll far down â†’ Full zoom
                    zoomLevel = 2;
                    scrollZoomToCountry("Germany", 3);
                    EUGasTradeLink();
                    console.log("Zoom level 2 (full)");
                } else if (window.scrollY > trigger1 && zoomLevel < 1) {
                    // Scroll halfway down â†’ Moderate zoom
                    zoomLevel = 1;
                    scrollZoomToCountry("Germany", 1.5);
                    EUGasTradeLink();
                    console.log("Zoom level 1 (moderate)");
                } else if (window.scrollY < trigger1 - 50 && zoomLevel > 0) {
                    // Scroll back up â†’ Zoom out to world
                    zoomLevel = 0;
                    zoomOutToWorld();
                    console.log("Zoom level 0 (world)");
                }
            });

                // zooms to a country
                function scrollZoomToCountry(countryName, scale) {
                        svg.transition().duration(1000).call(
                            zoom.transform,
                            d3.zoomIdentity
                                .scale(scale)
                                .translate(0, height * 0.2) 
                        );
                    };

            function zoomOutToWorld() {
                svg.transition().duration(1000).call(
                    zoom.transform,
                    d3.zoomIdentity // original zoom
                );
            }


            const tooltip = d3.select("body")
                            .append("div")
                            .attr("class", "tooltip")
                            .style("position", "absolute")
                            .style("padding", "6px 10px")
                            .style("background", "rgba(0, 0, 0, 0.7)")
                            .style("color", "white")
                            .style("border-radius", "4px")
                            .style("font-size", "12px")
                            .style("pointer-events", "none")
                            .style("opacity", 0);


            // creates first trade links between EU and the world
            function EUGasTradeLink() {
                Promise.all([
                        d3.csv("imports_of_gas_liquied_EU.csv", d3.autoType),
                        d3.csv("country-coord.csv", d3.autoType)
                    ]).then(([tradeData, countryCoords]) => {
                        // Step 1: Get Germany's coordinates (EU hub)
                        const germany = countryCoords.find(d => d.Country === "Germany");
                        const euLatLon = [germany["Longitude (average)"], germany["Latitude (average)"]];

                        // Step 2: Filter valid trade entries and map to coordinates
                        const tradeLinks = tradeData
                            .filter(d => d["Reporter"] === "European Union" && d["TradeFlow"] === "Import")
                            .map(d => {
                                const partner = countryCoords.find(c => c.Country === d["Partner"]);
                                if (!partner) return null;
                                return {
                                    source: euLatLon,
                                    target: [partner["Longitude (average)"], partner["Latitude (average)"]],
                                    value: d["Trade Value 1000USD"],
                                    quantity: d["Quantity"] 
                                };
                            })
                            .filter(d => d !== null);

                            tradeLinks.forEach(d => {
                                        d.strokeWidth = Math.sqrt(d.value) / 500;  // or adjust scale as needed
                                    });


                        const maxWidth = d3.max(tradeLinks, d => d.strokeWidth);
                        const colorScale = d3.scaleSequential()
                            .domain([0, maxWidth])
                            .interpolator(d3.interpolateOranges);  // y

                        const mouseOver = function(event, d) {
                            const data = this.__data__; 
                            // Dim all links
                            d3.selectAll(".trade-link")
                                .transition()
                                .duration(200)
                                .style("opacity", 0.2);

                            // Highlight the hovered link
                            d3.select(this)
                                .raise()  // bring to front
                                .transition()
                                .duration(200)
                                .style("opacity", 1);
                                // .style("stroke", "#000");  // optional: highlight color
                            // tooltip
                            //     .html(`<strong>Quantity:</strong> ${d.quantity}`)
                            //     .style("left", (event.pageX + 10) + "px")
                            //     .style("top", (event.pageY - 20) + "px")
                            //     .transition()
                            //     .duration(200)
                            //     .style("opacity", 1)
                            //     .style("z-index", 6);
                            // console.log(d.quantity)
                            let amount = d.quantity
                            const quantityBox = d3.select("#quantityBox");
                                quantityBox.transition()
                                    .duration(200)
                                    .style("opacity", 1);  // Make it visible
                                quantityBox.select("#quantityValue").text(data.quantity + "kg");  // Set the quantity value

                                console.log("Quantity:", data.quantity);

                        };

                        const mouseLeave = function(event, d) {
                            // Reset all links
                            d3.selectAll(".trade-link")
                                .transition()
                                .duration(200)
                                .style("opacity", 0.8);

                            // Reset stroke color of this link
                            d3.select(this)
                                .transition()
                                .duration(200)
                                .style("opacity", 0.8)
                                .style("stroke", d => colorScale(d.strokeWidth));  // reset to mapped color
                            tooltip
                                .transition()
                                .duration(200)
                                .style("opacity", 0);


                            d3.select("#quantityBox")
                                .transition()
                                .duration(200)
                                .style("opacity", 0);
                        };

                        // Step 3: Draw curved paths
                        svg.selectAll(".trade-link")
                            .data(tradeLinks)
                            .enter()
                            .append("path")
                            .attr("class", "trade-link")
                            .attr("d", d => {
                                const geoLine = {
                                    type: "LineString",
                                    coordinates: [d.source, d.target]
                                };
                                return path(geoLine);
                            })
                            .style("fill", "none")
                            .style("stroke", d => colorScale(d.strokeWidth))
                            .style("stroke-width", d => d.strokeWidth)
                            .style("opacity", 0.8)
                            .on("mouseover", mouseOver)
                            .on("mousemove", mouseOver) // update position as the mouse moves
                            .on("mouseleave", mouseLeave);

                        svg.selectAll("endCircle")
                            .data(tradeLinks)
                            .enter()
                            .append("circle")
                            .attr("cx", d => projection(d.target)[0])
                            .attr("cy", d => projection(d.target)[1])
                            .attr("r", d => d.strokeWidth)
                            .style("fill", d => colorScale(d.strokeWidth))
                            .style("opacity", 0.6);
                        });

                    }

        }
        requestData();

    </script>

</body>